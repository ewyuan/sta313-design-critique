{"version":3,"sources":["control-panel.js","map-style.js","App.js","utils.js","reportWebVitals.js","index.js"],"names":["ControlPanel","props","year","className","href","type","value","min","max","step","onChange","evt","target","React","dataLayer","id","paint","property","stops","App","useState","latitude","longitude","zoom","viewport","setYear","allData","setAllData","hoverInfo","setHoverInfo","useEffect","fetch","then","resp","json","onHover","useCallback","event","features","srcEvent","offsetX","offsetY","hoveredFeature","feature","x","y","data","useMemo","featureCollection","accessor","scale","scaleQuantile","domain","map","range","f","properties","percentile","updatePercentiles","unemploymentRates","mapboxApiAccessToken","process","width","height","interactiveLayerIds","mapStyle","style","left","top","name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad80a0ea.chunk.js","sourcesContent":["import * as React from 'react';\n\nfunction ControlPanel(props) {\n  const {year} = props;\n\n  return (\n    <div className=\"control-panel\">\n      <h3>Visualizing Unemployment Rates in Canada</h3>\n      <p>\n        Map showing unemployment rates by province/territory in year <b>{year}</b>. \n      </p>\n      <p>\n        Hover over a province/territory to\n        see unemployment rates, and percentile for that year.\n      </p>\n      <p>\n        Data source: <a href=\"https://www.statcan.gc.ca\">Statistics Canada</a>\n      </p>\n      <hr />\n\n      <div key={'year'} className=\"input\">\n        <label>Year</label>\n        <input\n          type=\"range\"\n          value={year}\n          min={2001}\n          max={2020}\n          step={1}\n          onChange={evt => props.onChange(evt.target.value)}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(ControlPanel);\n","// For more information on data-driven styles, see https://www.mapbox.com/help/gl-dds-ref/\nexport const dataLayer = {\n  id: 'data',\n  type: 'fill',\n  paint: {\n    'fill-color': {\n      property: 'percentile',\n      stops: [\n        [0, '#ffe6e6'],\n        [1, '#ffcccc'],\n        [2, '#ffb3b3'],\n        [3, '#ff9999'],\n        [4, '#ff8080'],\n        [5, '#ff6666'],\n        [6, '#ff4d4d'],\n        [7, '#ff3333'],\n        [8, '#ff1a1a'],\n        [9, '#ff0000']\n      ]\n    },\n    'fill-opacity': .7\n  }\n};\n","import React from 'react'\nimport {useState, useEffect, useMemo, useCallback} from 'react';\nimport ReactMapGL, {Source, Layer} from 'react-map-gl'\nimport ControlPanel from './control-panel'\nimport {dataLayer} from './map-style.js';\nimport \"./App.css\"\nimport {updatePercentiles} from './utils'\n\nconst TOKEN = process.env.REACT_APP_MAPBOX_TOKEN\n\nfunction App() {\n  const [viewport, setViewport] = React.useState({\n    latitude: 60,\n    longitude: -98,\n    zoom: 3\n  });\n\n  const [year, setYear] = useState(2001)\n  const [allData, setAllData] = useState(null)\n  const [hoverInfo, setHoverInfo] = useState(null)\n\n  useEffect(() => {\n    /* global fetch */\n    fetch(\n      'https://raw.githubusercontent.com/ewyuan/sta313-design-critique/master/src/data/unemployment-data.geojson'\n    )\n      .then(resp => resp.json())\n      .then(json => setAllData(json));\n  }, []);\n\n  const onHover = useCallback(event => {\n    const {\n      features,\n      srcEvent: {offsetX, offsetY}\n    } = event;\n    const hoveredFeature = features && features[0];\n\n    setHoverInfo(\n      hoveredFeature\n        ? {\n            feature: hoveredFeature,\n            x: offsetX,\n            y: offsetY\n          }\n        : null\n    );\n  }, []);\n\n  const data = useMemo(() => {\n    return allData && updatePercentiles(allData, f => f.properties.unemploymentRates[year]);\n  }, [allData, year]);\n\n  return (\n    <div>\n      <ReactMapGL\n        {...viewport}\n        mapboxApiAccessToken={TOKEN}\n        width=\"100wh\"\n        height=\"100vh\"\n        interactiveLayerIds={['data']}\n        onHover={onHover}\n        mapStyle=\"mapbox://styles/mapbox/light-v9\"\n      >\n        <Source type=\"geojson\" data={data}>\n          <Layer {...dataLayer} />\n        </Source>\n        {hoverInfo && (\n          <div className=\"tooltip\" style={{left: hoverInfo.x, top: hoverInfo.y}}>\n            <div>Province/Territory: {hoverInfo.feature.properties.name}</div>\n            <div>Unemployment Rate: {hoverInfo.feature.properties.value}%</div>\n            <div>Percentile: {(hoverInfo.feature.properties.percentile / 8) * 100}</div>\n          </div>\n        )}\n      </ReactMapGL>\n      <ControlPanel \n        year={year}\n        onChange={value => setYear(value)} \n      />\n    </div>\n  )\n}\n\nexport default App;\n","import {range} from 'd3-array';\nimport {scaleQuantile} from 'd3-scale';\n\nexport function updatePercentiles(featureCollection, accessor) {\n  const {features} = featureCollection;\n  const scale = scaleQuantile().domain(features.map(accessor)).range(range(9));\n  return {\n    type: 'FeatureCollection',\n    features: features.map(f => {\n      const value = accessor(f);\n      const properties = {\n        ...f.properties,\n        value,\n        percentile: scale(value)\n      };\n      return {...f, properties};\n    })\n  };\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}